version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn news_aggregator.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  celery_worker:
    build: .
    command: celery -A news_aggregator worker -l info
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - web
    restart: always

  celery_beat:
    build: .
    command: celery -A news_aggregator beat -l info
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - web
    restart: always

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - staticfiles:/staticfiles
      - mediafiles:/mediafiles
    depends_on:
      - web
    restart: always

volumes:
  postgres_data:
  redis_data:
  staticfiles:
  mediafiles: